Chef::Config[:community_site_url]    = 'https://example.com/'
Chef::Config[:api_service_url]       = 'https://<%= node['private_chef']['lb']['api_fqdn'] %>'
Chef::Config[:account_service_uri]   = 'http://<%= node['private_chef']['lb_internal']['vip'] %>:<%= node['private_chef']['lb_internal']['account_port'] %>'
Chef::Config[:chef_server_host_uri]  = 'http://<%= node['private_chef']['lb_internal']['vip'] %>:<%= node['private_chef']['lb_internal']['chef_port'] %>'
Chef::Config[:web_ui_proxy_user]     = 'pivotal'
Chef::Config[:web_ui_private_key]    = '/etc/opscode/webui_priv.pem'
Chef::Config[:job_worker_public_key] = '/etc/opscode/worker-public.pem'
Chef::Config[:google_analytics_id]   = false

##
## TODO: the chargify config values are environment dependent - set the environments up with chargify
##
Chef::Config[:chargify_hosted_page_secret] = ''
Chef::Config[:chargify_api_secret]         = ''
Chef::Config[:chargify_site]               = 'opscode-preprod'

Chef::Config[:dark_launch_config_filename] = '/etc/opscode/dark_launch_features.json'
Chef::Config[:quickstart_cloud_timeout] = 30

<% if @ldap_enabled -%>
Chef::Config[:external_authentication_enabled] = true
Chef::Config[:external_authentication_system_adjective] = '<%= node['private_chef']['ldap']['system_adjective'].gsub(/(['\\])/, '\\\\\1') %>'
<% end -%>

Chef::Log.level = :info

OpscodeWebui::Application.configure do

  config.logger = Logger.new(STDOUT)

  # Settings specified here will take precedence over those in config/application.rb

  # In the development environment your application's code is reloaded on
  # every request.  This slows down response time but is perfect for development
  # since you don't have to restart the webserver when you make code changes.
  config.cache_classes = true

  # Log error messages when you accidentally call methods on nil.
  config.whiny_nils = false

  # Show full error reports and disable caching
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Don't care if the mailer can't send
  config.action_mailer.delivery_method = :sendmail
  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = true

  # Print deprecation notices to the Rails logger
  config.active_support.deprecation = :notify

  # Only use best-standards-support built into browsers
  config.action_dispatch.best_standards_support = :builtin

  ActionMailer::Base.default :from => %{ <%= node['private_chef']['from_email'] %> }

  config.middleware.use ExceptionNotifier,
    :email_prefix => "[Exception] <%= @environment %>: ",
    :sender_address => %{ <%= node['private_chef']['from_email'] %> },
    :exception_recipients => %w{ <%= node['private_chef']['notification_email'] %> }

  config.action_mailer.default_url_options = {
    :host => "<%= node['private_chef']['lb']['web_ui_fqdn'] %>",
    :protocol => "https://",
    :port => ""
  }


end
