###
# Don't change this. :)
###
<%- private_chef_api_dir = node['private_chef']['opscode-chef']['dir'] -%>

Chef::Config.local_cookbook_storage   = true
Chef::Config.local_sandbox_path       = '<%= node['private_chef']['opscode-chef']['sandbox_path'] %>'
Chef::Config.local_checksum_repo_path = '<%= node['private_chef']['opscode-chef']['checksum_path'] %>'

# Fix for OC-6266
Chef::Config.cache_options({ :path => "<%= node['private_chef']['opscode-chef']['checksum_path'] %>", :skip_expires => true })

Merb::Config.use do |c|

  if Chef::Config[:log_location].kind_of?(String)
    c[:log_file] = Chef::Config[:log_location]
  end

  c[:couchdb_uri] = 'http://<%= node['private_chef']['couchdb']['vip'] %>:<%= node['private_chef']['couchdb']['port'] %>'
  c[:guidservice_host] = 'localhost'
  c[:guidservice_port] = 8000
  c[:certificateservice_uri] = 'http://<%= node['private_chef']['opscode-certificate']['vip'] %>:<%= node['private_chef']['opscode-certificate']['port'] %>/certificate'
  c[:account_database] = 'opscode_account'
  c[:org_database_prefix] = 'chef'
  c[:authorizationservice_uri] = 'http://<%= node['private_chef']['opscode-authz']['vip'] %>:<%= node['private_chef']['opscode-authz']['port'] %>'
  c[:cookbook_cache_path] = '<%= File.join(private_chef_api_dir, "cookbooks_cache") %>'
    #File.join("/tmp", "cookbooks_cache")
  c[:solr_uri] = 'http://<%= node['private_chef']['opscode-solr']['vip'] %>:<%= node['private_chef']['opscode-solr']['port'] %>'

  c[:redis_host] = '<%= node['private_chef']['redis']['vip'] %>'

  c[:exception_details] = true
  c[:reload_classes] = false
  c[:log_level] = Chef::Config[:log_level]
end

# Bunny time!
Chef::Config.amqp_host '<%= node['private_chef']['rabbitmq']['vip'] %>'
Chef::Config.amqp_port '<%= node['private_chef']['rabbitmq']['node_port'] %>'
Chef::Config.amqp_user '<%= node['private_chef']['rabbitmq']['user'] %>'
Chef::Config.amqp_pass '<%= node['private_chef']['rabbitmq']['password'] %>'
Chef::Config.amqp_vhost '<%= node['private_chef']['rabbitmq']['vhost'] %>'
Chef::Config.amqp_identity ''
Chef::Config.amqp_consumer_id '<%= node['private_chef']['rabbitmq']['consumer_id'] %>'

Chef::Config.jobs_amqp_user = '<%= node['private_chef']['rabbitmq']['jobs_user'] %>'
Chef::Config.jobs_amqp_pass = '<%= node['private_chef']['rabbitmq']['jobs_password'] %>'
Chef::Config.jobs_amqp_vhost = '<%= node['private_chef']['rabbitmq']['jobs_vhost'] %>'

# Solr
Chef::Config.solr_url 'http://<%= node['private_chef']['opscode-solr']['vip'] %>:<%= node['private_chef']['opscode-solr']['port'] %>'

# webui key needed to talk to opscode-account and check
# user <=> org association
Chef::Config.web_ui_private_key "/etc/opscode/webui_priv.pem"
Chef::Config.web_ui_proxy_user = '<%= @proxy_user %>'
Opscode::Mappers.connection_string = 'postgres://<%= node['private_chef'][node['private_chef']['database_type']]['sql_user'] %>:<%= node['private_chef'][node['private_chef']['database_type']]['sql_password'] %>@<%= node['private_chef'][node['private_chef']['database_type']]['vip'] %>/opscode_chef'

Chef::Config.account_service_uri 'http://<%= node['private_chef']['opscode-account']['vip'] %>:<%= node['private_chef']['opscode-account']['port'] %>'

Mixlib::Authorization::Config.web_ui_public_key = OpenSSL::PKey::RSA.new(File.read('/etc/opscode/webui_pub.pem'))

