  server {
    <%= @helper.listen_port(@server_proto) %>
    server_name <%= @server_name %>;

    access_log <%= @helper.access_log(@server_proto) %> opscode;
    <% if @server_proto == "https" %>
      ssl on;
      ssl_certificate <%= @ssl_certificate %>;
      ssl_certificate_key <%= @ssl_certificate_key %>;

      ssl_session_timeout 5m;

      ssl_protocols <%= @ssl_protocols %>;
      ssl_ciphers <%= @ssl_ciphers %>;
      ssl_prefer_server_ciphers on;
    <% end %>
    root <%= File.join(@dir, "html") %>;
    client_max_body_size <%= @client_max_body_size %>;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto <%= @x_forwarded_proto %>;
    proxy_pass_request_headers on;
    proxy_connect_timeout   1;
    proxy_send_timeout      300;
    proxy_read_timeout      300;

    error_page 404 =404 /404.html;
    error_page 503 =503 /503.json;

    # error doc requests should not be routed through the lua routing below.
    location ~ "^/[0-9]{3,3}\.(json|html)$" {
    }

    location /version {
      types { }
      default_type text/plain;
      alias /opt/opscode/version-manifest.txt;
    }

    location /docs {
      index index.html ;
      alias /opt/opscode/docs;
    }

    # bookshelf
    location ~ "/<%= node['private_chef']['opscode-erchef']['s3_bucket'] %>/{0,1}.*$" {
      proxy_pass http://bookshelf;
    }

    # erchef status endpoint
    location ~ "^/_status/?$" {
      types { }
      default_type application/json;
      proxy_pass http://opscode_erchef;
    }

    # Include external routes for addons
    include <%= node['private_chef']['nginx']['dir'] %>/etc/addon.d/*_external.conf;

    location ~ "^/(?:stylesheets|javascripts|images|facebox|css|favicon|robots|humans)/{0,1}.*$" {
      if ($http_x_chef_version ~* "^(\d+\.\d+?)\..+$") {
        error_page 400 =400 /400-chef_client_manage.json;
        return 400;
      }

      <% if @allowed_webui_subnets && !@allowed_webui_subnets.empty? %>
        <% @allowed_webui_subnets.each do |subnet| %>
      allow <%= subnet %>;
        <% end %>
      deny all;
      <% end %>

      proxy_pass http://opscode_webui;
      proxy_pass_request_headers off;
      proxy_cache webui-cache;
      proxy_cache_valid 200 302 300m;
      proxy_cache_valid 404 1m;
    }

    location / {
      satisfy any;
      <% if @allowed_webui_subnets && !@allowed_webui_subnets.empty? %>
        <% @allowed_webui_subnets.each do |subnet| %>
      allow <%= subnet %>;
        <% end %>
      deny all;
      <% end %>
      access_by_lua '
        if ngx.var.http_x_ops_userid then
          -- we will pass this access check since this is to be treated
          -- as an REST API invocation.  As long as we pass, the request will
          -- continue since we specified "satisfy any"
          return
        else
          -- by exiting this way, we will force nginx to
          -- also evaluate the subnets above because either this access
          -- check must pass, OR the allow/deny must pass due to "satisfy any"
          -- We are effectively saying here: "ok, this request is going to go
          -- to webui, so apply those other access rules first."
          ngx.exit(ngx.DECLINED)
        end
      ';

      set $mode "api";
      set $upstream "";
      rewrite_by_lua_file '<%=@script_path%>/dispatch.lua';
      proxy_pass http://$upstream;
      proxy_redirect http://$upstream /;
    }
  }
